# -*- coding: utf-8 -*-
"""21201574_utsho_A1_.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1saweSAHdgz3wSoQF_a5NXbSlejkAmTVC
"""



#Task-1


def manhattan_dis(a, b):
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def a_star(maze, start, goal, n, m):
    directions = [(-1, 0, 'U'), (1, 0, 'D'), (0, -1, 'L'), (0, 1, 'R')]
    visited = [[False]*m for _ in range(n)]
    queue = [(manhattan_dis(start, goal), 0, start[0], start[1], "")]

    while queue:

        queue.sort()
        f, g, x, y, path = queue.pop(0)

        if (x, y) == goal:
            return g, path

        if visited[x][y]:
            continue
        visited[x][y] = True

        for dx, dy, move in directions:
            nx, ny = x + dx, y + dy
            if 0 <= nx < n and 0 <= ny < m and maze[nx][ny] == '0' and not visited[nx][ny]:
                new_g = g + 1
                h = manhattan_dis((nx, ny), goal)
                queue.append((new_g + h, new_g, nx, ny, path + move))

    return -1, ""

def main():
    n, m = map(int, input().split())
    a, b = map(int, input().split())
    c, d = map(int, input().split())
    maze = [input().strip() for _ in range(n)]

    cost, path = a_star(maze, (a, b), (c, d), n, m)
    if cost == -1:
        print(-1)
    else:
        print(cost)
        print(path)

main()













#Task-2


def bfs(graph, start, n):

    dis = [float('inf')] * (n + 1)
    dis[start] = 0
    q = [start]

    while q:
        u = q[0]
        q = q[1:]
        for v in graph[u]:
            if dis[v] == float('inf'):
                dis[v] = dis[u] + 1
                q.append(v)
    return dis

def is_admissible(n, m, start, goal, heuristics, edges):

    graph = [[] for _ in range(n + 1)]
    for u, v in edges:
        graph[u].append(v)
        graph[v].append(u)


    goal_dis = bfs(graph, goal, n)

    inadmissible = []
    for node in range(1, n + 1):
        if heuristics[node] > goal_dis[node]:
            inadmissible.append(node)

    if not inadmissible:
        print(1)
    else:
        print(0)
        print("Inadmissible nodes are:", ' '.join(map(str, inadmissible)))

# Input handler
def main():
    n, m = map(int, input().split())
    start, goal = map(int, input().split())

    heuristics = [0] * (n + 1)
    for _ in range(n):
        node, h = map(int, input().split())
        heuristics[node] = h

    edges = []
    for _ in range(m):
        u, v = map(int, input().split())
        edges.append((u, v))

    is_admissible(n, m, start, goal, heuristics, edges)

if __name__ == "__main__":
    main()